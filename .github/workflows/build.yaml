name: Platform-Specific Build and Release
on:
  push:
    branches: [main]
    tags:
      - "v*" # Run workflow on version tags, e.g. v1.0.0
  pull_request:
    branches: [main]
jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: arm64
            platform: darwin-arm
          - os: macos-latest
            arch: x64
            platform: darwin-amd
          - os: ubuntu-latest
            arch: x64
            platform: linux-amd
          - os: windows-latest
            arch: x64
            platform: windows-amd
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          architecture: ${{ matrix.arch }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash
      - name: Build package
        run: |
          # Architecture-specific build commands
          if [[ "${{ matrix.platform }}" == "darwin-arm" ]]; then
            echo "Building for macOS with ARM architecture"
            # Add your macOS ARM-specific build commands here
            pyinstaller --onefile --noconsole main.py --name audio_silence_splitter-${{ matrix.platform }}
          elif [[ "${{ matrix.platform }}" == "darwin-amd" ]]; then
            echo "Building for macOS with AMD architecture"
            pyinstaller --onefile --noconsole main.py --name audio_silence_splitter-${{ matrix.platform }}
          else
            echo "Building for ${{ runner.os }} with AMD architecture"
            pyinstaller --onefile --noconsole main.py --name audio_silence_splitter-${{ matrix.platform }}
          fi
        shell: bash

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: dist/* # Update this to match your build output path

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') # Only run on version tags
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *-build/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
